{"version":3,"sources":["utils/starBackground.js","App.js","serviceWorker.js","index.js"],"names":["Starfield","this","fps","canvas","width","height","minVelocity","maxVelocity","stars","intervalId","Star","x","y","size","velocity","prototype","initialise","div","self","containerDiv","window","innerWidth","innerHeight","addEventListener","event","draw","document","createElement","appendChild","start","i","Math","random","setInterval","update","stop","clearInterval","dt","length","star","ctx","getContext","fillStyle","fillRect","App","randomiseStars","starfield","_this","starContainer","_this2","react_default","a","className","ref","elem","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32bdc18c.chunk.js","sourcesContent":["//\tDefine the starfield class.\r\nfunction Starfield() {\r\n  this.fps = 30;\r\n  this.canvas = null;\r\n  this.width = 0;\r\n  this.height = 0;\r\n  this.minVelocity = 15;\r\n  this.maxVelocity = 30;\r\n  this.stars = 100;\r\n  this.intervalId = 0;\r\n}\r\n\r\n//\tThe main function - initialises the starfield.\r\nStarfield.prototype.initialise = function(div) {\r\n  var self = this;\r\n\r\n  //\tStore the div.\r\n  this.containerDiv = div;\r\n  self.width = window.innerWidth;\r\n  self.height = window.innerHeight;\r\n\r\n  window.addEventListener(\"resize\", function resize(event) {\r\n    self.width = window.innerWidth;\r\n    self.height = window.innerHeight;\r\n    self.canvas.width = self.width;\r\n    self.canvas.height = self.height;\r\n    self.draw();\r\n  });\r\n\r\n  //\tCreate the canvas.\r\n  var canvas = document.createElement(\"canvas\");\r\n  div.appendChild(canvas);\r\n  this.canvas = canvas;\r\n  this.canvas.width = this.width;\r\n  this.canvas.height = this.height;\r\n};\r\n\r\nStarfield.prototype.start = function() {\r\n  //\tCreate the stars.\r\n  var stars = [];\r\n  for (var i = 0; i < this.stars; i++) {\r\n    stars[i] = new Star(\r\n      Math.random() * this.width,\r\n      Math.random() * this.height,\r\n      Math.random() * 3 + 1,\r\n      Math.random() * (this.maxVelocity - this.minVelocity) + this.minVelocity\r\n    );\r\n  }\r\n  this.stars = stars;\r\n\r\n  var self = this;\r\n  //\tStart the timer.\r\n  this.intervalId = setInterval(function() {\r\n    self.update();\r\n    self.draw();\r\n  }, 1000 / this.fps);\r\n};\r\n\r\nStarfield.prototype.stop = function() {\r\n  clearInterval(this.intervalId);\r\n};\r\n\r\nStarfield.prototype.update = function() {\r\n  var dt = 1 / this.fps;\r\n\r\n  for (var i = 0; i < this.stars.length; i++) {\r\n    var star = this.stars[i];\r\n    star.y += dt * star.velocity;\r\n    //\tIf the star has moved from the bottom of the screen, spawn it at the top.\r\n    if (star.y > this.height) {\r\n      this.stars[i] = new Star(\r\n        Math.random() * this.width,\r\n        0,\r\n        Math.random() * 3 + 1,\r\n        Math.random() * (this.maxVelocity - this.minVelocity) + this.minVelocity\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nStarfield.prototype.draw = function() {\r\n  //\tGet the drawing context.\r\n  var ctx = this.canvas.getContext(\"2d\");\r\n\r\n  //\tDraw the background.\r\n  ctx.fillStyle = \"#000000\";\r\n  ctx.fillRect(0, 0, this.width, this.height);\r\n\r\n  //\tDraw stars.\r\n  ctx.fillStyle = \"#ffffff\";\r\n  for (var i = 0; i < this.stars.length; i++) {\r\n    var star = this.stars[i];\r\n    ctx.fillRect(star.x, star.y, star.size, star.size);\r\n  }\r\n};\r\n\r\nfunction Star(x, y, size, velocity) {\r\n  this.x = x;\r\n  this.y = y;\r\n  this.size = size;\r\n  this.velocity = velocity;\r\n}\r\n\r\nexport default Starfield;\r\n","import React from \"react\";\nimport Starfield from \"./utils/starBackground\";\nimport \"./styles/normalize.scss\";\nimport \"./styles/base.scss\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.randomiseStars();\n  }\n  randomiseStars = () => {\n    var starfield = new Starfield();\n    starfield.initialise(this.starContainer);\n    starfield.stars = Math.random() * 100 + 50;\n    starfield.minVelocity = Math.random() * 30 + 5;\n    starfield.maxVelocity = Math.random() * 50 + starfield.minVelocity;\n    starfield.start();\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          className=\"starContainer\"\n          ref={elem => (this.starContainer = elem)}\n        />\n        <div className=\"test\">Hello</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}